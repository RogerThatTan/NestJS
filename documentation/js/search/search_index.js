var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.155,1,1.928]],["body/controllers/AppController.html",[0,1.926,1,3.216,2,1.585,3,0.493,4,0.425,5,0.425,6,3.48,7,0.599,8,0.036,9,1.086,10,2.781,11,3.48,12,0.493,13,0.025,14,3.48,15,1.92,16,0.03,17,0.03]],["title/modules/AppModule.html",[18,1.155,19,1.928]],["body/modules/AppModule.html",[1,2.783,2,1.437,3,0.316,4,0.272,5,0.272,7,0.648,8,0.037,9,0.696,10,2.661,11,2.23,12,0.316,13,0.016,16,0.022,17,0.022,18,1.813,19,3.666,20,1.23,21,1.23,22,1.513,23,1.513,24,1.23,25,2.484,26,1.513,27,2.23,28,2.23,29,2.23,30,2.661,31,2.958,32,2.407,33,2.14,34,1.513,35,1.361,36,2.695,37,2.783,38,2.695,39,2.695,40,2.695,41,2.695,42,2.23,43,1.695,44,1.308,45,2.695,46,2.695,47,2.23,48,2.695,49,1.924,50,2.695,51,0.631,52,3.813,53,1.695,54,2.695,55,1.695,56,2.695,57,2.695,58,2.695,59,1.695,60,2.695,61,2.695,62,2.695,63,2.23,64,1.924,65,2.23]],["title/injectables/AppService.html",[10,1.547,66,1.155]],["body/injectables/AppService.html",[3,0.474,4,0.409,5,0.409,7,0.474,8,0.036,9,1.045,10,2.521,12,0.474,13,0.024,16,0.029,17,0.029,64,2.89,66,1.882,67,2.272,68,3.35,69,0.771,70,2.521,71,5.654,72,1.045,73,4.048,74,2.044,75,1.713,76,2.044,77,4.048]],["title/controllers/AuthController.html",[0,1.155,78,1.928]],["body/controllers/AuthController.html",[0,1.532,2,1.532,3,0.476,4,0.411,5,0.411,7,0.587,8,0.036,9,1.05,12,0.476,13,0.024,15,1.857,16,0.029,17,0.029,78,3.151,79,3.366,80,2.904,81,5.008,82,2.478,83,3.366,84,4.067,85,2.283,86,2.558,87,2.558,88,2.283]],["title/modules/AuthModule.html",[18,1.155,30,1.547]],["body/modules/AuthModule.html",[2,1.678,3,0.396,4,0.342,5,0.342,7,0.62,8,0.036,9,0.873,12,0.396,13,0.02,16,0.026,17,0.026,18,1.876,20,1.544,21,1.544,22,1.898,23,1.898,24,1.544,25,2.794,26,2.794,30,2.905,32,2.033,33,2.499,34,1.898,35,1.707,37,2.127,78,3.131,82,2.762,83,2.798,89,2.798,90,2.798,91,2.798,92,3.381,93,2.801,94,3.381,95,2.798]],["title/injectables/AuthService.html",[66,1.155,82,1.399]],["body/injectables/AuthService.html",[3,0.345,4,0.297,5,0.297,7,0.475,8,0.036,9,0.76,12,0.345,13,0.017,15,1.344,16,0.024,17,0.024,44,1.591,49,2.101,51,0.949,55,1.851,59,2.918,63,2.435,66,1.528,67,1.652,69,0.56,70,2.047,72,1.198,74,2.047,75,1.993,76,2.047,82,1.851,85,2.276,86,1.851,87,1.851,88,1.652,93,1.851,96,2.435,97,3.042,98,4.137,99,4.639,100,2.435,101,2.301,102,2.943,103,2.276,104,2.276,105,1.68,106,2.943,107,2.943,108,4.055,109,2.342,110,2.943,111,1.652,112,2.435,113,2.435,114,2.101,115,2.435,116,2.101,117,2.943,118,2.943,119,2.943]],["title/classes/CreatePostDTO.html",[13,0.018,120,1.72]],["body/classes/CreatePostDTO.html",[3,0.163,4,0.141,5,0.141,7,0.473,8,0.036,12,0.163,13,0.017,16,0.013,17,0.013,51,1.24,55,2.36,69,0.265,72,1.229,75,1.794,105,2.066,120,1.287,121,0.635,122,3.485,123,0.993,124,1.102,125,2.807,126,2.925,127,2.925,128,3.692,129,2.925,130,2.925,131,3.752,132,2.088,133,3.752,134,3.048,135,1.973,136,3.105,137,2.293,138,1.278,139,3.291,140,1.391,141,1.391,142,2.293,143,2.293,144,3.392,145,1.391,146,1.391,147,2.925,148,1.391,149,3.392,150,1.897,151,1.637,152,2.293,153,1.391,154,1.391,155,1.391,156,1.391,157,1.391,158,3.392,159,1.897,160,1.391,161,1.391,162,2.293,163,2.293,164,2.807,165,2.293,166,2.293,167,2.293,168,1.391,169,1.391,170,1.151,171,1.391,172,3.392,173,3.392,174,1.897,175,2.293,176,2.293,177,2.293,178,2.293,179,2.293,180,2.925,181,1.391,182,3.105,183,1.391,184,2.355,185,2.807,186,3.341,187,1.391,188,1.391,189,1.391,190,2.293,191,1.391,192,1.391,193,3.392,194,1.391,195,1.391,196,1.897,197,1.391,198,1.391,199,1.391,200,2.36,201,2.678,202,1.897,203,1.151,204,3.048,205,2.293,206,2.293,207,2.293,208,2.925,209,2.293,210,0.702,211,0.993,212,2.293,213,1.391,214,1.391,215,0.875,216,0.875,217,1.637,218,1.391,219,3.105,220,3.533,221,0.702,222,1.391,223,1.391,224,1.391,225,2.293,226,1.391,227,1.391,228,1.391,229,1.391,230,1.391,231,1.151,232,1.391,233,2.088,234,1.391,235,1.391,236,1.391,237,1.391,238,1.391,239,1.442,240,1.151,241,1.391]],["title/classes/CreatePostMetaOptionsDTO.html",[13,0.018,215,1.928]],["body/classes/CreatePostMetaOptionsDTO.html",[3,0.433,4,0.374,5,0.374,7,0.433,8,0.036,12,0.433,13,0.028,16,0.028,17,0.028,51,1.105,69,0.705,72,1.219,75,1.619,121,1.69,122,3.711,124,1.779,135,1.956,138,1.959,200,3.444,201,3.37,210,1.869,215,2.969,217,3.711,233,3.711,239,3.27,242,3.062,243,3.701,244,3.701,245,3.701]],["title/classes/CreateUserDTO.html",[13,0.018,246,1.547]],["body/classes/CreateUserDTO.html",[3,0.329,4,0.284,5,0.284,7,0.329,8,0.035,12,0.329,13,0.023,16,0.023,17,0.023,51,1.147,59,2.847,69,0.535,72,1.265,75,1.919,105,1.627,111,2.54,121,1.283,124,1.479,135,2.03,174,3.249,200,3.082,201,3.68,202,2.324,203,2.324,204,2.803,210,1.418,231,3.249,246,1.982,247,4.266,248,2.005,249,3.231,250,3.745,251,2.809,252,2.809,253,2.809,254,2.809,255,2.809,256,2.809,257,2.809,258,4.899,259,3.926,260,3.926,261,3.926,262,3.926,263,3.926,264,4.42,265,3.926,266,1.982,267,3.926,268,3.926,269,2.809,270,3.926,271,2.809,272,4.525,273,2.809,274,2.809]],["title/classes/GetUsersParamDto.html",[13,0.018,275,1.72]],["body/classes/GetUsersParamDto.html",[3,0.41,4,0.354,5,0.354,7,0.593,8,0.036,12,0.41,13,0.03,16,0.027,17,0.027,44,1.564,51,1.185,69,0.667,72,0.905,105,1.889,109,2.808,121,1.6,124,1.718,135,1.452,136,2.901,139,2.867,184,1.6,204,3.254,210,1.77,211,2.502,220,3.772,221,1.77,266,2.558,275,2.559,276,3.772,277,2.559,278,2.901,279,4.558,280,3.505,281,3.505,282,3.772,283,2.502]],["title/classes/PatchPostDTO.html",[13,0.018,284,1.928]],["body/classes/PatchPostDTO.html",[3,0.417,4,0.36,5,0.36,7,0.598,8,0.036,12,0.417,13,0.027,16,0.027,17,0.027,51,0.834,69,0.678,72,0.92,109,2.822,120,2,121,1.627,123,2.544,124,1.736,135,1.476,138,1.736,170,2.949,184,1.627,200,2.898,210,1.799,216,2.241,219,3.812,221,1.799,266,2.326,282,3.812,284,2.898,285,3.812,286,3.812,287,4.607,288,4.607,289,3.563,290,3.563,291,2.949,292,2.949,293,2.949]],["title/classes/PatchUserDTO.html",[13,0.018,294,1.928]],["body/classes/PatchUserDTO.html",[3,0.493,4,0.425,5,0.425,7,0.599,8,0.035,12,0.493,13,0.025,16,0.03,17,0.03,121,1.92,216,2.646,246,2.124,248,3.003,286,4.23,291,3.48,294,3.216,295,3.48,296,5.112,297,3.48,298,3.48,299,3.003]],["title/entities/Post.html",[138,1.155,300,1.72]],["body/entities/Post.html",[3,0.488,4,0.421,5,0.421,7,0.488,8,0.035,12,0.488,13,0.024,16,0.03,17,0.03,51,0.975,53,2.62,69,0.793,72,1.075,75,1.743,124,1.915,134,3.915,138,1.915,300,2.853,301,3.447,302,4.165,303,2.62]],["title/controllers/PostsController.html",[0,1.155,304,1.928]],["body/controllers/PostsController.html",[0,0.862,2,0.862,3,0.268,4,0.231,5,0.231,7,0.557,8,0.036,9,0.591,12,0.268,13,0.013,14,1.893,15,1.044,16,0.02,17,0.02,47,2.802,51,0.944,69,0.436,70,1.71,72,1.041,74,2.036,75,1.383,76,1.155,80,1.633,97,3.034,103,2.263,104,2.263,105,1.671,120,2.796,132,2.418,135,1.671,138,1.994,184,2.035,196,3.688,221,1.155,284,2.803,292,2.802,293,2.802,304,2.13,305,1.893,306,2.287,307,3.386,308,3.386,309,3.386,310,2.287,311,3.386,312,3.386,313,2.13,314,3.386,315,4.456,316,4.456,317,2.287,318,2.287,319,3.386,320,2.287,321,3.386,322,2.287,323,2.802,324,2.287,325,2.802,326,3.386,327,3.688,328,2.287,329,2.287,330,3.386,331,1.893,332,1.893,333,2.802,334,2.036,335,1.893,336,3.336,337,3.336,338,1.893,339,1.633,340,1.893,341,2.287,342,2.287,343,2.287,344,2.287,345,2.802,346,2.287,347,2.287,348,2.287,349,1.893,350,2.287,351,2.287]],["title/modules/PostsModule.html",[18,1.155,31,1.72]],["body/modules/PostsModule.html",[2,1.7,3,0.404,4,0.348,5,0.348,7,0.624,8,0.036,9,0.89,12,0.404,13,0.02,16,0.026,17,0.026,18,1.894,20,1.575,21,1.575,22,1.936,23,1.936,24,1.575,25,2.821,26,1.936,31,3.292,32,2.591,33,2.532,34,1.936,35,1.742,37,2.838,95,2.854,304,3.162,334,2.865,335,2.854,352,2.854,353,3.449,354,2.854,355,3.449,356,3.449]],["title/injectables/PostsService.html",[66,1.155,334,1.547]],["body/injectables/PostsService.html",[3,0.363,4,0.313,5,0.313,7,0.492,8,0.037,9,0.801,12,0.363,13,0.018,15,1.416,16,0.025,17,0.025,44,1.931,51,0.984,66,1.584,67,1.741,69,0.591,70,2.122,72,1.085,74,1.566,75,1.635,76,1.566,85,2.359,86,1.951,87,2.644,88,1.741,97,2.676,100,2.567,101,2.281,103,2.359,104,2.359,105,1.741,112,2.567,116,2.214,125,4.229,134,3.648,277,1.741,323,2.567,334,2.122,357,2.567,358,3.478,359,3.102,360,4.203,361,3.102,362,3.102,363,3.102,364,3.478,365,3.102]],["title/entities/User.html",[44,1.051,300,1.72]],["body/entities/User.html",[3,0.319,4,0.275,5,0.275,7,0.319,8,0.036,12,0.319,13,0.016,16,0.023,17,0.023,44,1.317,51,1.32,53,1.711,55,3.039,59,2.798,69,0.518,72,1.315,75,1.903,109,2.246,111,2.496,124,1.446,135,2.111,151,3.774,249,3.175,250,3.68,266,1.938,300,2.154,303,1.711,366,2.251,367,4.831,368,5.548,369,5.548,370,5.548,371,5.548,372,3.838,373,2.72,374,2.72,375,4.447,376,2.72,377,2.72,378,2.72,379,5.094]],["title/controllers/UsersController.html",[0,1.155,380,1.928]],["body/controllers/UsersController.html",[0,0.476,2,0.476,3,0.148,4,0.128,5,0.128,7,0.479,8,0.037,9,0.546,12,0.148,13,0.007,15,0.577,16,0.012,17,0.012,44,0.726,51,0.956,69,0.24,70,1.068,72,0.705,74,1.796,76,2.492,80,0.902,85,0.709,86,0.794,87,0.794,88,0.709,97,2.771,101,1.131,103,1.533,104,1.996,105,1.474,109,2.064,111,1.188,132,0.902,135,1.131,138,1.34,139,2.009,150,2.643,151,2.28,164,1.045,184,1.757,186,1.045,221,0.638,239,2.009,240,1.751,246,1.943,264,1.751,266,2.643,275,1.793,277,2.863,283,1.51,294,2.697,299,1.51,313,2.009,327,1.751,331,1.045,332,1.751,333,2.259,336,1.751,337,1.751,338,1.045,339,0.902,340,1.045,345,1.045,349,1.751,380,1.331,381,1.045,382,2.116,383,3.194,384,2.116,385,1.263,386,1.263,387,1.263,388,3.913,389,3.586,390,1.263,391,2.116,392,2.116,393,2.116,394,1.263,395,2.116,396,4.728,397,1.263,398,2.116,399,2.116,400,2.116,401,1.263,402,2.116,403,2.116,404,3.194,405,1.263,406,2.116,407,3.848,408,2.116,409,2.116,410,2.116,411,3.848,412,4.287,413,3.557,414,2.116,415,2.116,416,3.194,417,2.116,418,2.116,419,2.116,420,1.751,421,2.116,422,1.751,423,1.263,424,1.263,425,1.263,426,1.263,427,1.263,428,1.263,429,1.263,430,3.848,431,1.263,432,1.263,433,4.087,434,1.045,435,1.045,436,1.045,437,2.73,438,1.263,439,1.263,440,1.263,441,1.045,442,1.263,443,1.263,444,1.263,445,1.263,446,3.194,447,2.116,448,2.116,449,2.116,450,2.116,451,1.263,452,2.116,453,1.263,454,1.263,455,1.263,456,2.73,457,1.263,458,1.263,459,1.263,460,1.263,461,1.263,462,1.263,463,1.263,464,1.045,465,1.045,466,1.263,467,1.045,468,1.263,469,1.263,470,1.263]],["title/modules/UsersModule.html",[18,1.155,32,1.399]],["body/modules/UsersModule.html",[2,1.631,3,0.38,4,0.328,5,0.328,7,0.653,8,0.036,9,0.837,12,0.38,13,0.019,16,0.025,17,0.025,18,1.837,20,1.48,21,1.48,22,1.82,23,1.82,24,1.48,25,2.736,26,2.736,30,2.186,32,2.6,33,2.43,34,1.82,35,1.637,37,2.039,42,2.683,43,2.039,44,1.112,93,2.724,101,2.49,380,3.067,436,2.683,471,2.683,472,2.683,473,2.683,474,3.242,475,3.242,476,3.242,477,2.683,478,3.242]],["title/injectables/UsersService.html",[66,1.155,101,1.27]],["body/injectables/UsersService.html",[3,0.244,4,0.21,5,0.21,7,0.585,8,0.037,9,0.538,12,0.244,13,0.012,15,0.951,16,0.019,17,0.019,43,1.31,44,1.308,49,1.487,51,0.995,65,2.612,66,1.19,67,1.169,69,0.397,70,1.594,72,1.098,74,1.925,75,1.568,76,1.925,82,2.282,85,1.772,88,1.772,93,1.31,97,2.958,98,1.724,101,1.308,103,2.387,104,2.387,105,1.762,109,1.925,111,2.7,113,1.724,114,1.487,115,1.724,116,2.254,216,1.31,246,2.308,249,3.037,266,2.523,275,2.387,277,1.169,283,1.487,299,1.487,303,1.31,313,1.31,339,1.487,358,3.155,388,3.155,389,2.721,422,2.612,434,1.724,435,1.724,477,1.724,479,1.724,480,3.812,481,3.157,482,3.157,483,2.083,484,3.812,485,3.52,486,2.083,487,3.157,488,2.083,489,2.083,490,2.083,491,2.083,492,3.157,493,2.083,494,2.083,495,2.083,496,2.083,497,2.083,498,2.083,499,3.157,500,2.083,501,2.083,502,2.083,503,2.083,504,3.812,505,2.083,506,2.083,507,2.083,508,2.083,509,2.083,510,2.083,511,3.157]],["title/coverage.html",[512,2.976]],["body/coverage.html",[0,1.87,1,1.82,5,0.292,6,2.395,8,0.036,10,1.461,13,0.032,16,0.024,17,0.024,24,1.321,44,0.993,51,0.677,66,1.87,68,2.395,78,1.82,79,2.395,82,1.321,96,2.395,101,1.199,120,1.624,122,2.861,123,2.861,138,1.51,215,1.82,217,2.066,242,2.395,246,1.461,247,2.395,248,2.861,275,1.624,276,2.395,277,1.624,278,2.395,284,1.82,285,2.395,294,1.82,295,2.395,300,2.25,301,2.395,304,1.82,305,2.395,313,1.82,334,1.461,357,2.395,366,2.395,380,1.82,381,2.395,479,2.395,512,2.066,513,2.395,514,2.894,515,2.894,516,6.043,517,5.391,518,4.598,519,4.008,520,2.395,521,2.894,522,4.008,523,2.894,524,4.008,525,2.894,526,2.894,527,2.894,528,2.894]],["title/dependencies.html",[21,1.681,529,2.123]],["body/dependencies.html",[8,0.037,9,0.998,13,0.028,16,0.028,17,0.028,21,1.765,43,2.432,210,1.952,211,2.76,221,1.952,297,3.2,298,3.2,303,2.432,465,3.2,530,3.867,531,3.867,532,5.304,533,3.867,534,3.867,535,3.867,536,3.867,537,3.867,538,3.867,539,3.867,540,3.867,541,3.867,542,3.867,543,3.867,544,3.867,545,3.867,546,3.867,547,3.867]],["title/miscellaneous/enumerations.html",[548,1.614,549,3.047]],["body/miscellaneous/enumerations.html",[8,0.036,16,0.028,17,0.028,69,0.73,128,3.994,138,1.818,159,3.994,182,3.994,239,3.769,389,3.445,548,2.411,549,3.171,550,4.826,551,4.826,552,4.826,553,4.826,554,4.826,555,4.826,556,4.826,557,4.826,558,4.826]],["title/miscellaneous/functions.html",[548,1.614,559,3.047]],["body/miscellaneous/functions.html",[8,0.032,16,0.032,17,0.032,24,2.621,69,0.883,520,3.836,548,2.916,559,3.836,560,4.635]],["title/index.html",[69,0.489,561,2.566,562,2.566]],["body/index.html",[4,0.208,8,0.034,16,0.018,17,0.018,35,2.42,64,3.664,114,3.421,139,2.662,184,0.942,185,1.707,233,1.473,325,1.707,364,2.593,441,3.966,464,1.707,467,3.502,485,1.707,512,1.473,513,2.593,563,2.063,564,2.063,565,3.79,566,3.134,567,2.063,568,2.063,569,2.063,570,2.063,571,3.134,572,3.79,573,2.063,574,2.063,575,4.232,576,2.063,577,5.132,578,2.063,579,4.98,580,2.063,581,2.063,582,2.063,583,3.134,584,2.063,585,3.134,586,2.063,587,3.79,588,2.063,589,2.063,590,2.063,591,2.063,592,2.063,593,2.063,594,4.232,595,3.134,596,2.063,597,2.063,598,2.063,599,2.063,600,3.134,601,2.063,602,3.134,603,2.063,604,2.063,605,3.134,606,4.551,607,4.232,608,2.063,609,3.134,610,2.063,611,2.063,612,2.063,613,2.063,614,4.232,615,2.063,616,2.063,617,2.063,618,2.063,619,2.063,620,3.134,621,2.063,622,2.063,623,2.063,624,2.063,625,2.063,626,3.134,627,2.063,628,2.063,629,2.063,630,3.134,631,2.063,632,2.063,633,3.502,634,3.134,635,2.063,636,2.063,637,2.063,638,2.063,639,2.063,640,2.063,641,2.063,642,2.063,643,3.134,644,2.063,645,2.063,646,2.063,647,2.063,648,3.79,649,2.063,650,2.063,651,2.063,652,2.063,653,2.063,654,3.134,655,2.063,656,2.063,657,2.063,658,2.063,659,3.134,660,2.063,661,2.063,662,2.063,663,3.134,664,3.134,665,2.063,666,2.063,667,2.063,668,2.063,669,2.063,670,2.063,671,2.063,672,2.063,673,2.063,674,2.063,675,2.063,676,1.707,677,2.063,678,2.063,679,2.063,680,2.063,681,2.063,682,2.063,683,1.707]],["title/modules.html",[20,1.903]],["body/modules.html",[8,0.031,16,0.031,17,0.031,19,2.726,20,1.978,30,2.188,31,2.432,32,1.978,633,4.789,684,5.787,685,5.787,686,5.787]],["title/overview.html",[687,3.45]],["body/overview.html",[2,1.199,8,0.035,10,2.438,16,0.025,17,0.025,18,1.199,19,3.71,20,1.453,21,1.453,22,1.786,23,1.786,24,1.453,25,1.786,26,1.786,27,2.633,28,2.633,29,2.633,30,2.801,31,3.181,32,2.588,33,2.4,34,1.786,35,1.607,53,2.002,67,1.786,82,2.588,89,2.633,90,2.633,91,2.633,101,2.348,121,1.453,334,2.438,352,2.633,354,2.633,420,2.633,471,2.633,472,2.633,473,2.633,687,2.633,688,4.829,689,3.182]],["title/properties.html",[124,1.387,529,2.123]],["body/properties.html",[8,0.036,16,0.032,17,0.032,124,1.719,184,2.083,676,3.775,683,3.775,690,4.562,691,4.562,692,4.562]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":516,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":691,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":539,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":544,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":547,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":538,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":517,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":523,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":518,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":522,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":519,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":524,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":404,"title":{},"body":{"controllers/UsersController.html":{}}}],["1.1.23",{"_index":531,"title":{},"body":{"dependencies.html":{}}}],["1/4",{"_index":526,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":413,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.2",{"_index":537,"title":{},"body":{"dependencies.html":{}}}],["10})@apiquery({name",{"_index":401,"title":{},"body":{"controllers/UsersController.html":{}}}],["11.0.1",{"_index":532,"title":{},"body":{"dependencies.html":{}}}],["1234",{"_index":283,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":280,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["2",{"_index":420,"title":{},"body":{"controllers/UsersController.html":{},"overview.html":{}}}],["2.0.5",{"_index":534,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":327,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":315,"title":{},"body":{"controllers/PostsController.html":{}}}],["25",{"_index":525,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":688,"title":{},"body":{"overview.html":{}}}],["5432",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["6",{"_index":689,"title":{},"body":{"overview.html":{}}}],["7.4.2",{"_index":536,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":546,"title":{},"body":{"dependencies.html":{}}}],["8.11.5",{"_index":541,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":173,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["96",{"_index":370,"title":{},"body":{"entities/User.html":{}}}],["allowing",{"_index":621,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":669,"title":{},"body":{"index.html":{}}}],["anys",{"_index":234,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["api",{"_index":403,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":336,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":311,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":219,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/PatchPostDTO.html":{}}}],["apiproperty({description",{"_index":170,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/PatchPostDTO.html":{}}}],["apiproperty({enum",{"_index":183,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["apiproperty({example",{"_index":195,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["apipropertyoptional",{"_index":220,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":136,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":148,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["apiquery",{"_index":437,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiquery({name",{"_index":397,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":337,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":338,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":342,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":439,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":441,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":394,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":571,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":149,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["async",{"_index":480,"title":{},"body":{"injectables/UsersService.html":{}}}],["auth",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":94,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":78,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":676,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":82,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":499,"title":{},"body":{"injectables/UsersService.html":{}}}],["aws",{"_index":609,"title":{},"body":{"index.html":{}}}],["backers",{"_index":670,"title":{},"body":{"index.html":{}}}],["based",{"_index":604,"title":{},"body":{"index.html":{}}}],["blog",{"_index":196,"title":{},"body":{"classes/CreatePostDTO.html":{},"controllers/PostsController.html":{}}}],["blogpost",{"_index":144,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["board",{"_index":662,"title":{},"body":{"index.html":{}}}],["body",{"_index":331,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":686,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":684,"title":{},"body":{"modules.html":{}}}],["building",{"_index":566,"title":{},"body":{"index.html":{}}}],["cases",{"_index":415,"title":{},"body":{"controllers/UsersController.html":{}}}],["channel",{"_index":636,"title":{},"body":{"index.html":{}}}],["character",{"_index":268,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["characters",{"_index":263,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["check",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":121,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{},"overview.html":{}}}],["clicks",{"_index":620,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":603,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":89,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":90,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":352,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":353,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":354,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":471,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":472,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":473,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":379,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":367,"title":{},"body":{"entities/User.html":{}}}],["come",{"_index":627,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":530,"title":{},"body":{"dependencies.html":{}}}],["conetn",{"_index":137,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["console",{"_index":453,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(createpostdto",{"_index":348,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(email",{"_index":463,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(id",{"_index":457,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(isauth",{"_index":508,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(limit",{"_index":458,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(page",{"_index":459,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(params",{"_index":444,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(patchpostsdto",{"_index":351,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(query",{"_index":445,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(request",{"_index":469,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(typeof",{"_index":456,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(userid",{"_index":365,"title":{},"body":{"injectables/PostsService.html":{}}}],["const",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":483,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/PostsController.html":{}}}],["constructor(usersservice",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["content",{"_index":125,"title":{},"body":{"classes/CreatePostDTO.html":{},"injectables/PostsService.html":{}}}],["content'})@isstring()@isoptional",{"_index":140,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":341,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":438,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["convert",{"_index":410,"title":{},"body":{"controllers/UsersController.html":{}}}],["courses",{"_index":642,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":512,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":216,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{},"injectables/UsersService.html":{}}}],["created",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{}}}],["createpost",{"_index":307,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":347,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":310,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":120,"title":{"classes/CreatePostDTO.html":{}},"body":{"classes/CreatePostDTO.html":{},"classes/PatchPostDTO.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":215,"title":{"classes/CreatePostMetaOptionsDTO.html":{}},"body":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto.createpostmetaoptionsdto",{"_index":147,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["creates",{"_index":312,"title":{},"body":{"controllers/PostsController.html":{}}}],["createuser",{"_index":481,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":487,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":246,"title":{"classes/CreateUserDTO.html":{}},"body":{"classes/CreateUserDTO.html":{},"classes/PatchUserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":501,"title":{},"body":{"injectables/UsersService.html":{}}}],["createusers",{"_index":382,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":460,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body('email",{"_index":462,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@req",{"_index":468,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":385,"title":{},"body":{"controllers/UsersController.html":{}}}],["database",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["date",{"_index":158,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":135,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDTO.html":{},"controllers/PostsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":638,"title":{},"body":{"index.html":{}}}],["default",{"_index":412,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe",{"_index":431,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":450,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":448,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":72,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDTO.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":426,"title":{},"body":{"controllers/UsersController.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":594,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":608,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":600,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":619,"title":{},"body":{"index.html":{}}}],["description",{"_index":184,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDTO.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":580,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":650,"title":{},"body":{"index.html":{}}}],["discord",{"_index":635,"title":{},"body":{"index.html":{}}}],["dive",{"_index":637,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":513,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":554,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["draft','scheduled','review','published",{"_index":227,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["draft','scheduled','review','published''})@isenum(poststatus)@isnotempty",{"_index":188,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["dtos/create",{"_index":339,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":434,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":340,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":589,"title":{},"body":{"index.html":{}}}],["each",{"_index":193,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["efficient",{"_index":567,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":599,"title":{},"body":{"index.html":{}}}],["eight",{"_index":262,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["email",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["endpoint",{"_index":407,"title":{},"body":{"controllers/UsersController.html":{}}}],["ensure",{"_index":597,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":653,"title":{},"body":{"index.html":{}}}],["entities",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"entities/Post.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":300,"title":{"entities/Post.html":{},"entities/User.html":{}},"body":{"entities/Post.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":225,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["enumerations",{"_index":549,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/post",{"_index":212,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["error",{"_index":166,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["example",{"_index":139,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exception",{"_index":503,"title":{},"body":{"injectables/UsersService.html":{}}}],["exisiting",{"_index":326,"title":{},"body":{"controllers/PostsController.html":{}}}],["existinguser",{"_index":498,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["experience",{"_index":640,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":465,"title":{},"body":{"controllers/UsersController.html":{},"dependencies.html":{}}}],["extends",{"_index":286,"title":{},"body":{"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{}}}],["false",{"_index":151,"title":{},"body":{"classes/CreatePostDTO.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":612,"title":{},"body":{"index.html":{}}}],["featured",{"_index":142,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["featuredimageurl",{"_index":126,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["features",{"_index":623,"title":{},"body":{"index.html":{}}}],["fetched",{"_index":395,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":391,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":614,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["final",{"_index":406,"title":{},"body":{"controllers/UsersController.html":{}}}],["find",{"_index":363,"title":{},"body":{"injectables/PostsService.html":{}}}],["findall",{"_index":358,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getuserparamdto",{"_index":490,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":360,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonebyid",{"_index":482,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":492,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":249,"title":{},"body":{"classes/CreateUserDTO.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["focus",{"_index":622,"title":{},"body":{"index.html":{}}}],["follow",{"_index":656,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":565,"title":{},"body":{"index.html":{}}}],["full",{"_index":652,"title":{},"body":{"index.html":{}}}],["function",{"_index":521,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":559,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":617,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":440,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id')@apioperation({summary",{"_index":390,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":321,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":71,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":308,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":343,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":320,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":561,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":422,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers",{"_index":383,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(@param",{"_index":442,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamdto",{"_index":387,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":275,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["graph",{"_index":645,"title":{},"body":{"index.html":{}}}],["grow",{"_index":666,"title":{},"body":{"index.html":{}}}],["handle",{"_index":502,"title":{},"body":{"injectables/UsersService.html":{}}}],["hands",{"_index":639,"title":{},"body":{"index.html":{}}}],["handy",{"_index":628,"title":{},"body":{"index.html":{}}}],["headers",{"_index":428,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":77,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":643,"title":{},"body":{"index.html":{}}}],["here",{"_index":674,"title":{},"body":{"index.html":{}}}],["host",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["https://nestjs.com",{"_index":680,"title":{},"body":{"index.html":{}}}],["id",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDTO.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ideniitifes",{"_index":236,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["identifier",{"_index":514,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":143,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":69,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDTO.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":601,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":625,"title":{},"body":{"index.html":{}}}],["inject",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":66,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":67,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["injectrepository",{"_index":495,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(user",{"_index":496,"title":{},"body":{"injectables/UsersService.html":{}}}],["install",{"_index":616,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":578,"title":{},"body":{"index.html":{}}}],["integer",{"_index":411,"title":{},"body":{"controllers/UsersController.html":{}}}],["interact",{"_index":646,"title":{},"body":{"index.html":{}}}],["ip",{"_index":429,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":208,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["isauth",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isemail",{"_index":270,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["isenum",{"_index":199,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["isenum(poststatus",{"_index":228,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["isenum(posttype",{"_index":223,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["isenum(posttype)@isnotempty",{"_index":156,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["isint",{"_index":282,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDTO.html":{}}}],["isiso8601",{"_index":207,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["isjson",{"_index":205,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["isnotempty",{"_index":200,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/PatchPostDTO.html":{}}}],["iso8080",{"_index":230,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["iso8080'})@isiso8601()@isoptional",{"_index":160,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["isoptional",{"_index":204,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@isarray()@isstring({each",{"_index":191,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["isoptional()@isjson",{"_index":168,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["isstring",{"_index":201,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{}}}],["isstring()@isemail()@isnotempty()@maxlength(96",{"_index":251,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["isstring()@isnotempty",{"_index":243,"title":{},"body":{"classes/CreatePostMetaOptionsDTO.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":253,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":257,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":255,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["isurl",{"_index":206,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["items",{"_index":152,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["job",{"_index":659,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":661,"title":{},"body":{"index.html":{}}}],["john",{"_index":509,"title":{},"body":{"injectables/UsersService.html":{}}}],["john@doe.com",{"_index":510,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":672,"title":{},"body":{"index.html":{}}}],["js",{"_index":466,"title":{},"body":{"controllers/UsersController.html":{}}}],["json",{"_index":163,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["kamil",{"_index":677,"title":{},"body":{"index.html":{}}}],["key",{"_index":233,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"index.html":{}}}],["kola",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["kola@doe.com",{"_index":511,"title":{},"body":{"injectables/UsersService.html":{}}}],["lastname",{"_index":250,"title":{},"body":{"classes/CreateUserDTO.html":{},"entities/User.html":{}}}],["learn",{"_index":631,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":369,"title":{},"body":{"entities/User.html":{}}}],["letter",{"_index":265,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["letters",{"_index":176,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["license",{"_index":683,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":664,"title":{},"body":{"index.html":{}}}],["limit",{"_index":388,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["limt",{"_index":421,"title":{},"body":{"controllers/UsersController.html":{}}}],["linkedin",{"_index":658,"title":{},"body":{"index.html":{}}}],["list",{"_index":392,"title":{},"body":{"controllers/UsersController.html":{}}}],["localhost",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["localhost.com/images",{"_index":229,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["localhost.com/images'})@isoptional()@isurl",{"_index":145,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["login",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":602,"title":{},"body":{"index.html":{}}}],["loop",{"_index":655,"title":{},"body":{"index.html":{}}}],["makes",{"_index":610,"title":{},"body":{"index.html":{}}}],["managing",{"_index":624,"title":{},"body":{"index.html":{}}}],["matches",{"_index":203,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{}}}],["matches(/^(?=.*[a",{"_index":274,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["matches(/^[a",{"_index":224,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["mau",{"_index":606,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":271,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["maxlength(96",{"_index":272,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["message",{"_index":174,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{}}}],["meta",{"_index":217,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"coverage.html":{}}}],["metadata",{"_index":543,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":127,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["methods",{"_index":70,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":261,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["minlength",{"_index":202,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{}}}],["minlength(3",{"_index":231,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{}}}],["minlength(4",{"_index":222,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["minlength(8",{"_index":273,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["miscellaneous",{"_index":548,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":663,"title":{},"body":{"index.html":{}}}],["mode",{"_index":583,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":467,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["myśliwiec",{"_index":678,"title":{},"body":{"index.html":{}}}],["name",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":464,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["needs",{"_index":288,"title":{},"body":{"classes/PatchPostDTO.html":{}}}],["nest",{"_index":572,"title":{},"body":{"index.html":{}}}],["nested",{"_index":232,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["nestframework",{"_index":682,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":533,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":297,"title":{},"body":{"classes/PatchUserDTO.html":{},"dependencies.html":{}}}],["nestjs/mau",{"_index":618,"title":{},"body":{"index.html":{}}}],["nestjs/platform",{"_index":535,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":221,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDTO.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":313,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newuser",{"_index":504,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":564,"title":{},"body":{"index.html":{}}}],["npm",{"_index":577,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":371,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":266,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDTO.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":164,"title":{},"body":{"classes/CreatePostDTO.html":{},"controllers/UsersController.html":{}}}],["offer",{"_index":660,"title":{},"body":{"index.html":{}}}],["official",{"_index":607,"title":{},"body":{"index.html":{}}}],["one",{"_index":264,"title":{},"body":{"classes/CreateUserDTO.html":{},"controllers/UsersController.html":{}}}],["open",{"_index":665,"title":{},"body":{"index.html":{}}}],["option",{"_index":237,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["optional",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options.dto",{"_index":218,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["options.dto.ts",{"_index":242,"title":{},"body":{"classes/CreatePostMetaOptionsDTO.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":244,"title":{},"body":{"classes/CreatePostMetaOptionsDTO.html":{}}}],["options.dto.ts:9",{"_index":245,"title":{},"body":{"classes/CreatePostMetaOptionsDTO.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":687,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":529,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":389,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["pagination",{"_index":416,"title":{},"body":{"controllers/UsersController.html":{}}}],["param",{"_index":332,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":454,"title":{},"body":{"controllers/UsersController.html":{}}}],["param.dto",{"_index":435,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":278,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:12",{"_index":281,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parama",{"_index":409,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["params",{"_index":443,"title":{},"body":{"controllers/UsersController.html":{}}}],["parseintpipe",{"_index":430,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":651,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":291,"title":{},"body":{"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{}}}],["partialtype(createpostdto",{"_index":287,"title":{},"body":{"classes/PatchPostDTO.html":{}}}],["partialtype(createuserdto",{"_index":296,"title":{},"body":{"classes/PatchUserDTO.html":{}}}],["passed",{"_index":190,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["password",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"entities/User.html":{}}}],["patch",{"_index":333,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":284,"title":{"classes/PatchPostDTO.html":{}},"body":{"classes/PatchPostDTO.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchpostsdto",{"_index":330,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchuser",{"_index":384,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":470,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":423,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":294,"title":{"classes/PatchUserDTO.html":{}},"body":{"classes/PatchUserDTO.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":400,"title":{},"body":{"controllers/UsersController.html":{}}}],["pg",{"_index":540,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":605,"title":{},"body":{"index.html":{}}}],["please",{"_index":634,"title":{},"body":{"index.html":{}}}],["port",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":402,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":185,"title":{},"body":{"classes/CreatePostDTO.html":{},"index.html":{}}}],["post",{"_index":138,"title":{"entities/Post.html":{}},"body":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/PatchPostDTO.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":314,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@minlength(4)@isnotempty",{"_index":197,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["post,page,story,series",{"_index":226,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["post,page,story,series'})@apiproperty({enum",{"_index":187,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["post.dto",{"_index":292,"title":{},"body":{"classes/PatchPostDTO.html":{},"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":123,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/PatchPostDTO.html":{},"coverage.html":{}}}],["post.dto.ts:11",{"_index":290,"title":{},"body":{"classes/PatchPostDTO.html":{}}}],["post.dto.ts:125",{"_index":155,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["post.dto.ts:29",{"_index":198,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["post.dto.ts:33",{"_index":157,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["post.dto.ts:44",{"_index":181,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["post.dto.ts:56",{"_index":189,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["post.dto.ts:64",{"_index":141,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["post.dto.ts:72",{"_index":169,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["post.dto.ts:80",{"_index":146,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["post.dto.ts:88",{"_index":161,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["post.dto.ts:98",{"_index":194,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["postgres",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["posts",{"_index":306,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":356,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":304,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":31,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":334,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":182,"title":{},"body":{"classes/CreatePostDTO.html":{},"miscellaneous/enumerations.html":{}}}],["posttype",{"_index":128,"title":{},"body":{"classes/CreatePostDTO.html":{},"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":375,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":585,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":563,"title":{},"body":{"index.html":{}}}],["project",{"_index":575,"title":{},"body":{"index.html":{}}}],["properties",{"_index":124,"title":{"properties.html":{}},"body":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDTO.html":{},"entities/Post.html":{},"entities/User.html":{},"properties.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":335,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/users.service",{"_index":436,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":159,"title":{},"body":{"classes/CreatePostDTO.html":{},"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":129,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["put",{"_index":425,"title":{},"body":{"controllers/UsersController.html":{}}}],["query",{"_index":396,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":447,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":449,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":632,"title":{},"body":{"index.html":{}}}],["read",{"_index":673,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":593,"title":{},"body":{"index.html":{}}}],["real",{"_index":647,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":542,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":393,"title":{},"body":{"controllers/UsersController.html":{}}}],["repository",{"_index":485,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":427,"title":{},"body":{"controllers/UsersController.html":{}}}],["request",{"_index":433,"title":{},"body":{"controllers/UsersController.html":{}}}],["required",{"_index":150,"title":{},"body":{"classes/CreatePostDTO.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":613,"title":{},"body":{"index.html":{}}}],["reset",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":626,"title":{},"body":{"index.html":{}}}],["response",{"_index":316,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":76,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":399,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":74,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":556,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["root",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["run",{"_index":579,"title":{},"body":{"index.html":{}}}],["runs",{"_index":598,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":545,"title":{},"body":{"dependencies.html":{}}}],["same",{"_index":497,"title":{},"body":{"injectables/UsersService.html":{}}}],["sample_token",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":241,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["scalable",{"_index":568,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":555,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["schema",{"_index":130,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["sent",{"_index":446,"title":{},"body":{"controllers/UsersController.html":{}}}],["series",{"_index":558,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["seriliaze",{"_index":162,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["server",{"_index":569,"title":{},"body":{"index.html":{}}}],["service",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["setup",{"_index":576,"title":{},"body":{"index.html":{}}}],["show",{"_index":452,"title":{},"body":{"controllers/UsersController.html":{}}}],["side",{"_index":570,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":238,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["simple",{"_index":615,"title":{},"body":{"index.html":{}}}],["slug",{"_index":131,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["small",{"_index":175,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDTO.html":{},"classes/PatchUserDTO.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces.for",{"_index":179,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["special",{"_index":267,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["specific",{"_index":279,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sponsors",{"_index":668,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":560,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post",{"_index":550,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":68,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":73,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":476,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":494,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:11",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:19",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":520,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":122,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":285,"title":{},"body":{"classes/PatchPostDTO.html":{},"coverage.html":{}}}],["src/posts/enums/post",{"_index":553,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.entity.ts",{"_index":301,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:5",{"_index":302,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":305,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:12",{"_index":322,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:24",{"_index":318,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:36",{"_index":329,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":355,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":357,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:4",{"_index":359,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:9",{"_index":361,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":247,"title":{},"body":{"classes/CreateUserDTO.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":276,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":295,"title":{},"body":{"classes/PatchUserDTO.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":479,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:10",{"_index":486,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:19",{"_index":488,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:34",{"_index":491,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:53",{"_index":493,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity.ts",{"_index":366,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:13",{"_index":374,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:20",{"_index":377,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:28",{"_index":373,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:35",{"_index":378,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:6",{"_index":376,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":381,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:112",{"_index":424,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:71",{"_index":405,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:95",{"_index":386,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":474,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":581,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":584,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":586,"title":{},"body":{"index.html":{}}}],["started",{"_index":562,"title":{"index.html":{}},"body":{}}],["starter",{"_index":574,"title":{},"body":{"index.html":{}}}],["statements",{"_index":515,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":132,"title":{},"body":{"classes/CreatePostDTO.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["status.enum",{"_index":213,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["status.enum.ts",{"_index":551,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":654,"title":{},"body":{"index.html":{}}}],["steps",{"_index":595,"title":{},"body":{"index.html":{}}}],["story",{"_index":557,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":611,"title":{},"body":{"index.html":{}}}],["string",{"_index":75,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["succeffully",{"_index":346,"title":{},"body":{"controllers/PostsController.html":{}}}],["succeffully'})@post",{"_index":317,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully",{"_index":349,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@patch",{"_index":328,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":345,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":633,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":685,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":528,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":527,"title":{},"body":{"coverage.html":{}}}],["tags",{"_index":133,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["take",{"_index":596,"title":{},"body":{"index.html":{}}}],["test",{"_index":364,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["test:covdeployment",{"_index":591,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":590,"title":{},"body":{"index.html":{}}}],["tests",{"_index":587,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":667,"title":{},"body":{"index.html":{}}}],["this.authservice.isauth",{"_index":507,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.postsservice.findall(userid",{"_index":344,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.usersrepository.create(createuserdto",{"_index":505,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":500,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":506,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":461,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getuserparamdto",{"_index":451,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid('1234",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":362,"title":{},"body":{"injectables/PostsService.html":{}}}],["thrown",{"_index":167,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["time",{"_index":648,"title":{},"body":{"index.html":{}}}],["title",{"_index":134,"title":{},"body":{"classes/CreatePostDTO.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["token",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":675,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":211,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["tring",{"_index":235,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["true",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"entities/User.html":{}}}],["true})@minlength(3",{"_index":192,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["true})@type(undefined",{"_index":154,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["twitter",{"_index":681,"title":{},"body":{"index.html":{}}}],["type",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDTO.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["type.enum.ts",{"_index":214,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["type.enum.ts.ts",{"_index":552,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeorm",{"_index":303,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":478,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":298,"title":{},"body":{"classes/PatchUserDTO.html":{},"dependencies.html":{}}}],["typescript",{"_index":573,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":455,"title":{},"body":{"controllers/UsersController.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":153,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["unique",{"_index":372,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":588,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":489,"title":{},"body":{"injectables/UsersService.html":{}}}],["unlicensed",{"_index":692,"title":{},"body":{"properties.html":{}}}],["updated",{"_index":293,"title":{},"body":{"classes/PatchPostDTO.html":{},"controllers/PostsController.html":{}}}],["updated'})@isint()@isnotempty",{"_index":289,"title":{},"body":{"classes/PatchPostDTO.html":{}}}],["updatepost",{"_index":309,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":350,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostsdto",{"_index":324,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":325,"title":{},"body":{"controllers/PostsController.html":{},"index.html":{}}}],["url",{"_index":180,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["url'})@isstring()@isnotempty()@matches(/^[a",{"_index":171,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["use",{"_index":414,"title":{},"body":{"controllers/UsersController.html":{}}}],["usefactory",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":44,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.entity",{"_index":477,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["userid",{"_index":323,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["username",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["users",{"_index":277,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":475,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.dto",{"_index":299,"title":{},"body":{"classes/PatchUserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.dto.ts",{"_index":248,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/PatchUserDTO.html":{},"coverage.html":{}}}],["users.dto.ts:16",{"_index":254,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["users.dto.ts:22",{"_index":256,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["users.dto.ts:28",{"_index":252,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["users.dto.ts:37",{"_index":269,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["users/1223",{"_index":417,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/id?limit=10&page=1",{"_index":408,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/user.entity",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["users?limit=10&page=2",{"_index":419,"title":{},"body":{"controllers/UsersController.html":{}}}],["userscontroller",{"_index":380,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userses",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["usersmodule",{"_index":32,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":484,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":101,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":177,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["using",{"_index":649,"title":{},"body":{"index.html":{}}}],["validatenested",{"_index":209,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["validation",{"_index":165,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["validationpipe",{"_index":432,"title":{},"body":{"controllers/UsersController.html":{}}}],["validator",{"_index":210,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"classes/CreateUserDTO.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDTO.html":{},"dependencies.html":{}}}],["value",{"_index":239,"title":{},"body":{"classes/CreatePostDTO.html":{},"classes/CreatePostMetaOptionsDTO.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":186,"title":{},"body":{"classes/CreatePostDTO.html":{},"controllers/UsersController.html":{}}}],["varchar",{"_index":368,"title":{},"body":{"entities/User.html":{}}}],["version",{"_index":690,"title":{},"body":{"properties.html":{}}}],["video",{"_index":641,"title":{},"body":{"index.html":{}}}],["visit",{"_index":630,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":644,"title":{},"body":{"index.html":{}}}],["void",{"_index":319,"title":{},"body":{"controllers/PostsController.html":{}}}],["want",{"_index":240,"title":{},"body":{"classes/CreatePostDTO.html":{},"controllers/UsersController.html":{}}}],["watch",{"_index":582,"title":{},"body":{"index.html":{}}}],["website",{"_index":679,"title":{},"body":{"index.html":{}}}],["whos",{"_index":418,"title":{},"body":{"controllers/UsersController.html":{}}}],["without",{"_index":178,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["working",{"_index":629,"title":{},"body":{"index.html":{}}}],["x",{"_index":657,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":671,"title":{},"body":{"index.html":{}}}],["you're",{"_index":592,"title":{},"body":{"index.html":{}}}],["z0",{"_index":172,"title":{},"body":{"classes/CreatePostDTO.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":260,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":259,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["za",{"_index":258,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './users/user.entity';\n// Userses Created Module\n\n@Module({\n  imports: [\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    TypeOrmModule.forRootAsync({\n      imports: [],\n      inject: [],\n      useFactory: () => ({\n        type: 'postgres',\n        entities: [User],\n        synchronize: true,\n        port: 5432,\n        username: 'postgres',\n        password: 'root',\n        host: 'localhost',\n        database: 'nestjs-kola',\n      }),\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello NestJS!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    //injecting auth service\n    private readonly authService: AuthService,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  exports: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    //injecting user service\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n  public login(email: string, password: string, id: string) {\n    //check user exists database\n    const user = this.usersService.findOneById('1234');\n    //login\n    //token\n    return 'Sample_token';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDTO.html":{"url":"classes/CreatePostDTO.html","title":"class - CreatePostDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/DTOs/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'This is the conetn of the post', example: 'This is the content'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/DTOs/create-post.dto.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Featured image for your blogpost', example: 'localhost.com/images'})@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/DTOs/create-post.dto.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         createPostMetaOptionsDto.CreatePostMetaOptionsDTO[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/DTOs/create-post.dto.ts:125\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(postType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/DTOs/create-post.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date on which the blogpost is published', example: 'ISO8080'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/DTOs/create-post.dto.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Seriliaze your JSON object else a validation error will be thrown '})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/DTOs/create-post.dto.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For example -'my-url'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces.For example \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/DTOs/create-post.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postType, description: 'Possible values post,page,story,series'})@ApiProperty({enum: postStatus, description: 'Possible values 'draft','scheduled','review','published''})@IsEnum(postStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/DTOs/create-post.dto.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of tags passed as string values', example: ''})@IsOptional()@IsArray()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/DTOs/create-post.dto.ts:98\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'This is a title', description: 'This is the title for the blog post'})@IsString()@MinLength(4)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/DTOs/create-post.dto.ts:29\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEnum,\n  IsNotEmpty,\n  IsString,\n  MinLength,\n  Matches,\n  IsOptional,\n  IsJSON,\n  IsUrl,\n  IsISO8601,\n  IsArray,\n  minLength,\n  ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { postStatus } from '../enums/post-status.enum';\nimport { postType } from '../enums/post-type.enum.ts';\nimport * as createPostMetaOptionsDto from './create-post-meta-options.dto';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDTO {\n  @ApiProperty({\n    example: 'This is a title',\n    description: 'This is the title for the blog post',\n  })\n  @IsString()\n  @MinLength(4)\n  @IsNotEmpty()\n  title: string;\n\n  @IsEnum(postType)\n  @IsNotEmpty()\n  postType: postType;\n\n  @ApiProperty({\n    description: \"For example -'my-url\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces.For example \"my-url\"',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: postType,\n    description: 'Possible values post,page,story,series',\n  })\n  @ApiProperty({\n    enum: postStatus,\n    description: \"Possible values 'draft','scheduled','review','published'\",\n  })\n  @IsEnum(postStatus)\n  @IsNotEmpty()\n  status: postStatus;\n\n  @ApiPropertyOptional({\n    description: 'This is the conetn of the post',\n    example: 'This is the content',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Seriliaze your JSON object else a validation error will be thrown ',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'Featured image for your blogpost',\n    example: 'localhost.com/images',\n  })\n  @IsOptional()\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'The date on which the blogpost is published',\n    example: 'ISO8080',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of tags passed as string values',\n    example: '',\n  })\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true })\n  @MinLength(3, { each: true })\n  tags?: string[];\n\n  //nested object\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          description:\n            'the key can be anys tring ideniitifes for your meta option',\n          example: 'sidebarEnabled',\n        },\n        value: {\n          type: 'any',\n          description: 'Any value that you want to save to the key',\n          example: true,\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => createPostMetaOptionsDto.CreatePostMetaOptionsDTO)\n  metaOptions?: createPostMetaOptionsDto.CreatePostMetaOptionsDTO[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDTO.html":{"url":"classes/CreatePostMetaOptionsDTO.html","title":"class - CreatePostMetaOptionsDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/DTOs/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/DTOs/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/DTOs/create-post-meta-options.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionsDTO {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDTO.html":{"url":"classes/CreateUserDTO.html","title":"class - CreateUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTOs/create-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsEmail()@IsNotEmpty()@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-users.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-users.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-users.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/create-users.dto.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDTO {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsString()\n  @IsEmail()\n  @IsNotEmpty()\n  @MaxLength(96)\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTOs/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/DTOs/get-users-param.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsInt } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: 1234,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDTO.html":{"url":"classes/PatchPostDTO.html","title":"class - PatchPostDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/DTOs/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDTO)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/DTOs/patch-post.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDTO } from './create-post.dto';\n\nexport class PatchPostDTO extends PartialType(CreatePostDTO) {\n  @ApiProperty({\n    description: 'The ID of the post that needs to be updated',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDTO.html":{"url":"classes/PatchUserDTO.html","title":"class - PatchUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/DTOs/patch-users.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDTO)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDTO } from './create-users.dto';\n\nexport class PatchUserDTO extends PartialType(CreateUserDTO) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:5\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Entity } from 'typeorm';\n\n@Entity()\nexport class Post {\n  title: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new blog post'})@ApiResponse({status: 201, description: 'You get a 201 response if your post is created succeffully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostsDto: PatchPostDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Updates an exisiting blog post'})@ApiResponse({status: 200, description: 'A 200 response if the post is updated successfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostsDto\n                                            \n                                                            PatchPostDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDTO } from './DTOs/create-post.dto';\nimport { PatchPostDTO } from './DTOs/patch-post.dto';\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Get('/:userId')\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n\n  @ApiOperation({\n    summary: 'Creates a new blog post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if your post is created succeffully',\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDTO) {\n    console.log(createPostDto);\n  }\n\n  @ApiOperation({\n    summary: 'Updates an exisiting blog post',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'A 200 response if the post is updated successfully',\n  })\n  @Patch()\n  public updatePost(@Body() patchPostsDto: PatchPostDTO) {\n    console.log(patchPostsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\n@Injectable()\nexport class PostsService {\n  constructor(\n    //Injecting user service\n    private readonly usersService: UsersService,\n  ) {}\n  public findAll(userId: string) {\n    //users service\n    const user = this.usersService.findOneById(userId);\n    //find user\n\n    return [\n      {\n        user: user,\n        title: 'test  title',\n        content: 'test content',\n      },\n      {\n        user: user,\n\n        title: 'title',\n        content: 'content',\n      },\n    ];\n\n    console.log(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:35\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully by the query '})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'The number of entries returned per query ', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'The position of the page number that you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:71\n                        \n                    \n\n\n            \n                \n                        Final Endpoint - /users/id?limit=10&page=1\nParama id - optional, convert to integer, cannot have a default value\nQuery limit - integer, default 10\nQuery page - integer, default value 1\n==> USE CASES\n/users/ -> return all users with default pagination\n/users/1223 -> returns one user whos id is 1234\n/users?limit=10&page=2 -> return page 2 with limt of pagination 10\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:112\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDTO\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Patch,\n  Put,\n  Delete,\n  Param,\n  Query,\n  Body,\n  Req,\n  Headers,\n  Ip,\n  ParseIntPipe,\n  DefaultValuePipe,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { Request } from '@nestjs/common';\nimport { CreateUserDTO } from './DTOs/create-users.dto';\nimport { GetUsersParamDto } from './DTOs/get-users-param.dto';\nimport { PatchUserDTO } from './DTOs/patch-users.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(\n    //Injecting Users Service\n    private readonly usersService: UsersService,\n  ) {}\n\n  /**\n   * Final Endpoint - /users/id?limit=10&page=1\n   * Parama id - optional, convert to integer, cannot have a default value\n   * Query limit - integer, default 10\n   * Query page - integer, default value 1\n   * ==> USE CASES\n   * /users/ -> return all users with default pagination\n   * /users/1223 -> returns one user whos id is 1234\n   * /users?limit=10&page=2 -> return page 2 with limt of pagination 10\n   */\n\n  @Get('/:id')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users on the application',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfully by the query ',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'The number of entries returned per query ',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description:\n      'The position of the page number that you want the API to return',\n    example: 1,\n  })\n  // public getUsers(@Param() params: any, @Query() query: any) {\n  //   console.log(params);\n  //   console.log(query);\n  //   return 'You sent a request to users endpoint';\n  // }\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUserParamDto, limit, page);\n  }\n\n  //only id and limit will show in the console\n  // public getUsers(\n  //   @Param('id', ParseIntPipe) id: number | undefined,\n  //   @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n  //   @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  // ) {\n  //   // console.log(typeof id);\n  //   // console.log(id);\n  //   console.log(typeof limit);\n  //   console.log(limit);\n  //   console.log(typeof page);\n  //   console.log(page);\n  //   return 'You sent a request to users endpoint';\n  // }\n\n  @Post()\n  public createUsers(@Body() createUserDto: CreateUserDTO) {\n    return this.usersService.createUser(createUserDto);\n  }\n\n  //only email will show\n  // public createUsers(@Body('email') email: any) {\n  //   console.log(email);\n  //   return 'You sent a post request to users endpoint';\n  // }\n\n  //need for express js for more object values\n  // public createUsers(@Req() request: Request) {\n  //   console.log(request);\n  //   return 'You sent a post request to users endpoint';\n  // }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDTO) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n  imports: [forwardRef(() => AuthModule), TypeOrmModule.forFeature([User])],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, usersRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDTO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: number; firstName: string; email: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject, forwardRef } from '@nestjs/common';\nimport { GetUsersParamDto } from '../DTOs/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../user.entity';\nimport { CreateUserDTO } from '../DTOs/create-users.dto';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n\n    @InjectRepository(User)\n    private usersRepository: Repository,\n  ) {}\n\n  public async createUser(createUserDto: CreateUserDTO) {\n    //check is user exists with same email\n\n    const existingUser = await this.usersRepository.findOne({\n      where: { email: createUserDto.email },\n    });\n\n    //handle exception\n\n    //create new user\n    let newUser = this.usersRepository.create(createUserDto);\n    newUser = await this.usersRepository.save(newUser);\n    return newUser;\n  }\n\n  public findAll(\n    getUserParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n    const isAuth = this.authService.isAuth();\n    console.log(isAuth);\n    return [\n      {\n        firstName: 'john',\n        email: 'john@doe.com',\n      },\n      {\n        firstName: 'kola',\n        email: 'kola@doe.com',\n      },\n    ];\n  }\n\n  public findOneById(id: string) {\n    return {\n      id: 1234,\n      firstName: 'kola',\n      email: 'kola@doe.com',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/DTOs/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/DTOs/create-post.dto.ts\n            \n            class\n            CreatePostDTO\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/DTOs/patch-post.dto.ts\n            \n            class\n            PatchPostDTO\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/DTOs/create-users.dto.ts\n            \n            class\n            CreateUserDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/DTOs/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/DTOs/patch-users.dto.ts\n            \n            class\n            PatchUserDTO\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                25 %\n                (1/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^11.0.1\n        \n            @nestjs/core : ^11.0.1\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^11.0.1\n        \n            @nestjs/swagger : ^7.4.2\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../post-status.enum.ts)\n                        \n                        \n                            postType   (src/.../post-type.enum.ts.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/post-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/post-type.enum.ts.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g @nestjs/mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
